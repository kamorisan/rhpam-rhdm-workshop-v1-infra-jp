---

- name: Check if the PostgreSQL database exists
  shell: "oc get dc/postgresql -n {{OCP_PROJECT}}"
  register: postgresql_result
  ignore_errors: true
  changed_when: false

- name: Create PostgreSQL database
  shell: "oc new-app --template=postgresql-ephemeral -p NAMESPACE=openshift -p POSTGRESQL_DATABASE=postgres -p POSTGRESQL_USER=postgres -p POSTGRESQL_PASSWORD=postgres -n {{OCP_PROJECT}}"
  when: postgresql_result is failed

- name: Check if ConfigMap exists
  shell: "oc get cm/postgresql-config-map -n {{OCP_PROJECT}}"
  register: postgresql_cm_result
  ignore_errors: true
  changed_when: false

- name: Create ConfigMap
  shell: "oc create configmap postgresql-config-map --from-file={{ role_path }}/files/provision_data.sh --from-file={{ role_path }}/files/wait_for_postgres.sh --from-file={{ role_path }}/files/provision_test_data.sql -n {{OCP_PROJECT}}"
  when: postgresql_cm_result is failed

- name: Set label on ConfigMap
  shell: "oc label cm postgresql-config-map app=postgresql-ephemeral -n {{OCP_PROJECT}}"
  when: postgresql_cm_result is failed

- name: Attach ConfigMap
  shell: "oc set volume dc/postgresql --name=postgresql-config-volume --add -m /tmp/config-files -t configmap --configmap-name=postgresql-config-map -n {{OCP_PROJECT}}"
  when: postgresql_cm_result is failed

# 追加
- name: Set ConfigMap
  shell: "oc set env --from=configmap/postgresql-config-map dc/postgresql -n {{OCP_PROJECT}}"
  when: postgresql_cm_result is failed

- name: Set Deployment Hooks
  shell: "oc set deployment-hook dc/postgresql --post -c postgresql -e POSTGRESQL_HOSTNAME=postgresql -e POSTGRESQL_USER=postgres -e POSTGRESQL_PASSWORD=postgres --volumes=postgresql-config-volume --failure-policy=abort -- /bin/bash /tmp/config-files/wait_for_postgres.sh /tmp/config-files/provision_data.sh -n {{OCP_PROJECT}}"
  when: postgresql_cm_result is failed
